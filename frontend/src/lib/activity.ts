import {
  Activity,
  ActivityWithSkills,
  StudentActivityWithStudentInfo,
  ActivitySkill,
  ActivityEvaluation
} from '@/types/models';

import { fetchAuthSession } from '@aws-amplify/auth';

async function getAuthHeaders() {
  const session = await fetchAuthSession();
  const idToken = session.tokens?.idToken?.toString();
  //if (!idToken) throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö token');
  return {
    Authorization: `Bearer ${idToken}`,
    'Content-Type': 'application/json',
  };
}

const BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8000';

/**
 * GET /activities
 * ‡∏î‡∏∂‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
export async function getAllActivities(): Promise<Activity[]> {
  const res = await fetch(`${BASE_URL}/activity`, {
    cache: 'no-store',
    headers: await getAuthHeaders(), // ‚úÖ ‡πÅ‡∏ô‡∏ö token
  });
  if (!res.ok) throw new Error('Failed to fetch activities');
  return res.json();
}

/**
 * GET /activities/:id
 * ‡∏î‡∏∂‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡∏≤‡∏° ID
 */


/**
 * POST /activities
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà
 */
/**
 * POST /activity
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà
 */
export const createActivity = async (data: {
  name: string;
  description?: string;
  details?: string;
  status: number;
  amount?: number;
  max_amount: number;
  event_date: string;
  registration_deadline?: string;
  location?: string;
  cover_image_url?: string;
  is_published?: boolean;
}) => {
  const res = await fetch(`${BASE_URL}/activity`, {
    method: 'POST',
    body: JSON.stringify(data),
    headers: await getAuthHeaders(),
  });
  if (!res.ok) throw new Error('Failed to create activity');
  return res.json();
};


/**
 * PUT /activities/:activityId/skills
 * ‡πÄ‡∏û‡∏¥‡πà‡∏° skills ‡πÉ‡∏´‡πâ activity
 */
/**
 * PUT /activity/:activityId/skills
 * ‡πÄ‡∏û‡∏¥‡πà‡∏° skills ‡πÉ‡∏´‡πâ activity
 */
export const addSkillsToActivity = async (
  activityId: string,
  skills: {
    skill_id: string;
    skill_level: number;
    note?: string;
  }[]
) => {
  const res = await fetch(`${BASE_URL}/activity/${activityId}/skill-ids`, {
    method: 'PUT',
    body: JSON.stringify(skills), // ‚úÖ array ‡∏ï‡∏£‡∏á ‡πÜ
    headers: await getAuthHeaders(),
  });
  if (!res.ok) throw new Error('Failed to add skills to activity');
};




/**
 * DELETE /activities/:id
 * ‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
 */
export async function deleteActivity(id: string): Promise<Activity> {
  const res = await fetch(`${BASE_URL}/activity/${id}`, {
    method: 'DELETE',
    headers: await getAuthHeaders(), // ‚úÖ ‡πÅ‡∏ô‡∏ö token
  });

  if (!res.ok) {
    const error = await res.text();
    throw new Error(error || 'Failed to delete activity');
  }

  return res.json();
}

/**
 * GET /activities/detail/:id
 * ‡∏î‡∏∂‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ skills ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
 */
export async function getActivityDetail(id: string): Promise<ActivityWithSkills> {
  const res = await fetch(`${BASE_URL}/activity/detail/${id}`, {
    method: 'GET',
    cache: 'no-store',
    headers: await getAuthHeaders(), // ‚úÖ ‡πÅ‡∏ô‡∏ö token
  });

  if (!res.ok) throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î');
  return res.json();
}

/**
 * GET /activities/open
 * ‡∏î‡∏∂‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö (status = 0) + skills
 */
export async function getOpenActivities(): Promise<ActivityWithSkills[]> {
  const res = await fetch(`${BASE_URL}/activity/open`, {
    method: 'GET',
    cache: 'no-store',
    headers: await getAuthHeaders(), // ‚úÖ ‡πÅ‡∏ô‡∏ö token
  });

  if (!res.ok) throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö');
  return res.json();
}

/**
 * GET /activities/with-skills
 * ‡∏î‡∏∂‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° skills
 */
export async function getAllActivitiesWithSkills(): Promise<ActivityWithSkills[]> {
  const res = await fetch(`${BASE_URL}/activity/with-skills`, {
    method: 'GET',
    cache: 'no-store',
    headers: await getAuthHeaders(), // ‚úÖ ‡πÅ‡∏ô‡∏ö token
  });

  if (!res.ok) throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° skills');
  return res.json();
}

/**
 * GET /activities/participants/:id
 * ‡∏î‡∏∂‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
 */
export async function getParticipantsByActivityId(id: string): Promise<StudentActivityWithStudentInfo[]> {
  const res = await fetch(`${BASE_URL}/activity/participants/${id}`, {
    method: 'GET',
    cache: 'no-store',
    headers: await getAuthHeaders(), // ‚úÖ ‡πÅ‡∏ô‡∏ö token
  });

  if (!res.ok) throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ');
  return res.json();
}

/**
 * PUT /activities/status/:id
 * ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
 */
/*
export async function updateActivityStatus(id: string, status: number): Promise<Activity> {
  const res = await fetch(`${BASE_URL}/activity/status/${id}`, {
    method: 'PUT',
    headers: await getAuthHeaders(), // ‚úÖ ‡πÅ‡∏ô‡∏ö token
    body: JSON.stringify({ status }),
  });

  if (!res.ok) {
    const error = await res.text();
    throw new Error(error || 'Failed to update activity status');
  }

  return res.json();
}
*/
/**
 * PUT /activities/:id/skills
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï skills ‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
 */


export async function updateActivitySkills(
  activityId: string,
  skills: { skill_id: string; skill_level: number; note?: string }[]
): Promise<void> {
  const res = await fetch(`${BASE_URL}/activity/${activityId}/skill-ids`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(skills),
  });
  if (!res.ok) throw new Error('Failed to update activity skills');
}





export async function recalculateAllStudentSkills(): Promise<{ message: string }> {
  const res = await fetch(`${BASE_URL}/activity/recalculate-skill`, {
    method: 'POST',
    headers: await getAuthHeaders(),
  });

  if (!res.ok) throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ');
  return res.json();
}



export async function recalculateAllActivityAmount(): Promise<{ message: string }> {
  const res = await fetch(`${BASE_URL}/activity/recalculate-amount`, {
    method: 'POST',
    headers: await getAuthHeaders(),
  });

  if (!res.ok) throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ');
  return res.json();
}


















/** GET /activity/:id - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° */
export async function getActivityById(id: string): Promise<Activity> {
  const res = await fetch(`${BASE_URL}/activity/${id}`);
  if (!res.ok) throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°');
  return await res.json();
}

/** GET /activity/:id/participants - ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° */
export async function getActivityParticipants(id: string): Promise<StudentActivityWithStudentInfo[]> {
  const res = await fetch(`${BASE_URL}/activity/${id}/participants`);
  if (!res.ok) throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°');
  return await res.json();
}

/** PUT /student-activity/:id/status - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° */
export async function updateStudentActivityStatus(
  studentActivityId: string,
  status: number
): Promise<{ success: boolean }> {
  const res = await fetch(`${BASE_URL}/activity/student-activity/${studentActivityId}/status`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ status }),
  });
  if (!res.ok) throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞');
  return await res.json();
}

/** GET /activity/:id/skills - ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö */
export async function getActivitySkills(activityId: string): Promise<ActivitySkill[]> {
  const res = await fetch(`${BASE_URL}/activity/${activityId}/skills`);
  if (!res.ok) throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°');
  return await res.json();
}

/** DELETE /activity/:id/skill/:skillId - ‡∏•‡∏ö‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° */
export async function deleteActivitySkill(activityId: string, skillId: string): Promise<void> {
  const res = await fetch(`${BASE_URL}/activity/${activityId}/skill/${skillId}`, {
    method: 'DELETE',
  });
  if (!res.ok) throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°');
}

/** GET /activity/:id/evaluations - ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ */
export async function getActivityEvaluations(activityId: string): Promise<ActivityEvaluation[]> {
  const res = await fetch(`${BASE_URL}/activity/${activityId}/evaluations`);
  if (!res.ok) throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°');
  return await res.json();
}

/** PUT /activity/:id - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° */
export async function updateActivity(
  activityId: string,
  payload: Partial<Activity>
): Promise<Activity> {
  const res = await fetch(`${BASE_URL}/activity/${activityId}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload),
  });

  if (!res.ok) {
    const errorText = await res.text();
    console.error('Update failed:', res.status, errorText); // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
    throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°');
  }

  return await res.json();
}




export async function addSkillsToStudent(
  studentId: string,
  skills: { skill_id: string; skill_level: number }[]
): Promise<void> {
  const res = await fetch(`${BASE_URL}/student/addStudentSkills`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ student_id: studentId, skills }),
  });
  if (!res.ok) throw new Error('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
}




export async function submitActivityEvaluation(payload: {
  student_id: string;
  activity_id: string;
  score_venue: number;
  score_speaker: number;
  score_interest: number;
  score_content: number;
  score_applicability: number;
  score_overall: number;
  comment?: string;
  suggestions?: string;
  is_anonymous?: boolean;
}): Promise<void> {
  const res = await fetch(`${BASE_URL}/activity/evaluation`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload),
  });

  if (!res.ok) throw new Error('‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
}



export async function updateConfirmationDays(activityId: string, days: number) {
  const res = await fetch(`${BASE_URL}/activity/${activityId}/confirm-days`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ days }),
  });

  if (!res.ok) {
    throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤');
  }

  return await res.json();
}


export async function confirmStudentSkills(
  studentId: string,
  activityId: string,
  skills: { skill_id: string; level: number; note?: string }[]
) {
  const res = await fetch(`${BASE_URL}/activity/${activityId}/confirm-skills/${studentId}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(skills),
  });

  if (!res.ok) throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤');
  return await res.json();
}




export async function updateActivityPublish(id:string,pub:boolean){
  const res = await fetch(`${BASE_URL}/activity/${id}/publish`,{
    method:'PUT',headers:await getAuthHeaders(),
    body:JSON.stringify({is_published:pub})
  });
  if(!res.ok)throw new Error('update publish failed');
}

export async function updateActivityStatus(id:string, status:number){
  const res = await fetch(`${BASE_URL}/activity/${id}/status`,{
    method:'PUT',headers:await getAuthHeaders(),
    body:JSON.stringify({status})
  });
  if(!res.ok)throw new Error('update status failed');
}



// frontend/lib/activity.ts
export async function recalculateAmount(activityId: string): Promise<number> {
  const res = await fetch(`${BASE_URL}/activity/recalculate-amount/${activityId}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
  });

  if (!res.ok) {
    const text = await res.text();
    throw new Error(`Failed to recalculate amount: ${text}`);
  }

  const data = await res.json();
  return data.amount;
}
